
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALERT AND AWAIT BREAK CASE CATCH CLASS COLON COMMA CONST CONTINUE DEBUGGER DEFAULT DELETE DIVIDE DIV_EQUAL DO ELSE EQUAL EXPORT EXTENDS FINALLY FOR FUNCTION GREATER GREATEREQUAL ID IF IMPORT IN INSTANCEOF ISEQUAL IS_IDENTICAL IS_NOT_IDENTICAL LBLOCK LBRACKET LESS LESSEQUAL LPAREN MAP MINUS MINUS_EQUAL MOD MOD_EQUAL MUL_EQUAL NEW NOT NUMBER OR PERIOD PLUS PLUS_EQUAL RBLOCK RBRACKET RETURN RPAREN SUPER SWITCH THIS THROW TIMES TRY TWOPOINTS TYPEOF VAR VOID WHILE WITH YIELDsentencias : impresion\n                    | expressionsentencias : IF LPAREN logical_expresion RPARENsentencias : IF LPAREN logical_expresion RPAREN sentencias ELSE sentenciassentencias : WHILE LPAREN logical_expresion RPAREN blockimpresion : ALERT LPAREN expression RPARENimpresion : ALERT LPAREN RPARENexpression : expression PLUS termexpression : expression TIMES termexpression : expression DIVIDE termexpression : expression MOD termexpression : VAR IDexpression : CONST IDexpression : ID EQUAL NEW MAP LPAREN RPARENexpression : logical_expresionlogical_expresion : expression GREATER termlogical_expresion : expression LESS termlogical_expresion : expression ISEQUAL termlogical_expresion : expression IS_NOT_IDENTICAL termlogical_expresion : expression IS_IDENTICAL termexpression : blockblock : LBLOCK sentencias RBLOCKexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : NUMBERfactor : IDfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'IF':([0,14,56,63,],[4,4,4,4,]),'WHILE':([0,14,56,63,],[7,7,7,7,]),'ALERT':([0,14,56,63,],[9,9,9,9,]),'VAR':([0,5,14,26,28,29,56,63,],[11,11,11,11,11,11,11,11,]),'CONST':([0,5,14,26,28,29,56,63,],[13,13,13,13,13,13,13,13,]),'ID':([0,5,11,13,14,17,18,19,20,21,22,23,24,25,26,28,29,30,31,56,63,],[12,12,32,34,12,37,37,37,37,37,37,37,37,37,12,12,12,37,37,12,12,]),'LBLOCK':([0,5,14,26,28,29,56,57,63,],[14,14,14,14,14,14,14,14,14,]),'NUMBER':([0,5,14,17,18,19,20,21,22,23,24,25,26,28,29,30,31,56,63,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'LPAREN':([0,4,5,7,9,14,17,18,19,20,21,22,23,24,25,26,28,29,30,31,56,59,63,],[5,26,5,28,29,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,62,5,]),'$end':([1,2,3,6,8,10,12,15,16,32,34,36,37,38,39,40,41,42,43,44,45,48,51,52,53,55,56,58,61,64,65,],[0,-1,-2,-15,-21,-23,-28,-26,-27,-12,-13,-8,-28,-9,-10,-11,-16,-17,-18,-19,-20,-29,-7,-24,-25,-22,-3,-6,-5,-14,-4,]),'RBLOCK':([2,3,6,8,10,12,15,16,32,34,35,36,37,38,39,40,41,42,43,44,45,48,51,52,53,55,56,58,61,64,65,],[-1,-2,-15,-21,-23,-28,-26,-27,-12,-13,55,-8,-28,-9,-10,-11,-16,-17,-18,-19,-20,-29,-7,-24,-25,-22,-3,-6,-5,-14,-4,]),'ELSE':([2,3,6,8,10,12,15,16,32,34,36,37,38,39,40,41,42,43,44,45,48,51,52,53,55,56,58,60,61,64,65,],[-1,-2,-15,-21,-23,-28,-26,-27,-12,-13,-8,-28,-9,-10,-11,-16,-17,-18,-19,-20,-29,-7,-24,-25,-22,-3,-6,63,-5,-14,-4,]),'PLUS':([3,6,8,10,12,15,16,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,],[17,-15,-21,-23,-28,-26,-27,17,-12,-13,-8,-28,-9,-10,-11,-16,-17,-18,-19,-20,-15,17,-29,-15,17,-24,-25,-22,-14,]),'TIMES':([3,6,8,10,12,15,16,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,],[18,-15,-21,30,-28,-26,-27,18,-12,-13,30,-28,30,30,30,30,30,30,30,30,-15,18,-29,-15,18,-24,-25,-22,-14,]),'DIVIDE':([3,6,8,10,12,15,16,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,],[19,-15,-21,31,-28,-26,-27,19,-12,-13,31,-28,31,31,31,31,31,31,31,31,-15,19,-29,-15,19,-24,-25,-22,-14,]),'MOD':([3,6,8,10,12,15,16,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,],[20,-15,-21,-23,-28,-26,-27,20,-12,-13,-8,-28,-9,-10,-11,-16,-17,-18,-19,-20,-15,20,-29,-15,20,-24,-25,-22,-14,]),'GREATER':([3,6,8,10,12,15,16,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,],[21,-15,-21,-23,-28,-26,-27,21,-12,-13,-8,-28,-9,-10,-11,-16,-17,-18,-19,-20,-15,21,-29,-15,21,-24,-25,-22,-14,]),'LESS':([3,6,8,10,12,15,16,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,],[22,-15,-21,-23,-28,-26,-27,22,-12,-13,-8,-28,-9,-10,-11,-16,-17,-18,-19,-20,-15,22,-29,-15,22,-24,-25,-22,-14,]),'ISEQUAL':([3,6,8,10,12,15,16,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,],[23,-15,-21,-23,-28,-26,-27,23,-12,-13,-8,-28,-9,-10,-11,-16,-17,-18,-19,-20,-15,23,-29,-15,23,-24,-25,-22,-14,]),'IS_NOT_IDENTICAL':([3,6,8,10,12,15,16,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,],[24,-15,-21,-23,-28,-26,-27,24,-12,-13,-8,-28,-9,-10,-11,-16,-17,-18,-19,-20,-15,24,-29,-15,24,-24,-25,-22,-14,]),'IS_IDENTICAL':([3,6,8,10,12,15,16,27,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,],[25,-15,-21,-23,-28,-26,-27,25,-12,-13,-8,-28,-9,-10,-11,-16,-17,-18,-19,-20,-15,25,-29,-15,25,-24,-25,-22,-14,]),'RPAREN':([6,8,10,12,15,16,27,29,32,34,36,37,38,39,40,41,42,43,44,45,46,48,49,50,52,53,55,62,64,],[-15,-21,-23,-28,-26,-27,48,51,-12,-13,-8,-28,-9,-10,-11,-16,-17,-18,-19,-20,56,-29,57,58,-24,-25,-22,64,-14,]),'EQUAL':([12,],[33,]),'NEW':([33,],[54,]),'MAP':([54,],[59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencias':([0,14,56,63,],[1,35,60,65,]),'impresion':([0,14,56,63,],[2,2,2,2,]),'expression':([0,5,14,26,28,29,56,63,],[3,27,3,47,47,50,3,3,]),'logical_expresion':([0,5,14,26,28,29,56,63,],[6,6,6,46,49,6,6,6,]),'block':([0,5,14,26,28,29,56,57,63,],[8,8,8,8,8,8,8,61,8,]),'term':([0,5,14,17,18,19,20,21,22,23,24,25,26,28,29,56,63,],[10,10,10,36,38,39,40,41,42,43,44,45,10,10,10,10,10,]),'factor':([0,5,14,17,18,19,20,21,22,23,24,25,26,28,29,30,31,56,63,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,52,53,15,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencias","S'",1,None,None,None),
  ('sentencias -> impresion','sentencias',1,'p_sentencias','analisisSintactico.py',4),
  ('sentencias -> expression','sentencias',1,'p_sentencias','analisisSintactico.py',5),
  ('sentencias -> IF LPAREN logical_expresion RPAREN','sentencias',4,'p_sentencias_if','analisisSintactico.py',9),
  ('sentencias -> IF LPAREN logical_expresion RPAREN sentencias ELSE sentencias','sentencias',7,'p_sentencias_if_else','analisisSintactico.py',11),
  ('sentencias -> WHILE LPAREN logical_expresion RPAREN block','sentencias',5,'p_sentencias_while','analisisSintactico.py',13),
  ('impresion -> ALERT LPAREN expression RPAREN','impresion',4,'p_impresion','analisisSintactico.py',15),
  ('impresion -> ALERT LPAREN RPAREN','impresion',3,'p_impresion_vacio','analisisSintactico.py',17),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','analisisSintactico.py',20),
  ('expression -> expression TIMES term','expression',3,'p_expression_times','analisisSintactico.py',22),
  ('expression -> expression DIVIDE term','expression',3,'p_expression_divide','analisisSintactico.py',24),
  ('expression -> expression MOD term','expression',3,'p_expression_mod','analisisSintactico.py',26),
  ('expression -> VAR ID','expression',2,'p_expression_var','analisisSintactico.py',30),
  ('expression -> CONST ID','expression',2,'p_expression_const','analisisSintactico.py',32),
  ('expression -> ID EQUAL NEW MAP LPAREN RPAREN','expression',6,'p_expression_asignacion_map','analisisSintactico.py',34),
  ('expression -> logical_expresion','expression',1,'p_expression_logical','analisisSintactico.py',38),
  ('logical_expresion -> expression GREATER term','logical_expresion',3,'p_expression_greater','analisisSintactico.py',41),
  ('logical_expresion -> expression LESS term','logical_expresion',3,'p_expression_less','analisisSintactico.py',43),
  ('logical_expresion -> expression ISEQUAL term','logical_expresion',3,'p_expression_isequal','analisisSintactico.py',45),
  ('logical_expresion -> expression IS_NOT_IDENTICAL term','logical_expresion',3,'p_expression_is_not_identical','analisisSintactico.py',47),
  ('logical_expresion -> expression IS_IDENTICAL term','logical_expresion',3,'p_expression_is_identical','analisisSintactico.py',49),
  ('expression -> block','expression',1,'p_expression_block','analisisSintactico.py',51),
  ('block -> LBLOCK sentencias RBLOCK','block',3,'p_block','analisisSintactico.py',53),
  ('expression -> term','expression',1,'p_expression_term','analisisSintactico.py',55),
  ('term -> term TIMES factor','term',3,'p_term_times','analisisSintactico.py',59),
  ('term -> term DIVIDE factor','term',3,'p_term_div','analisisSintactico.py',63),
  ('term -> factor','term',1,'p_term_factor','analisisSintactico.py',67),
  ('factor -> NUMBER','factor',1,'p_factor_num','analisisSintactico.py',71),
  ('factor -> ID','factor',1,'p_factor_var','analisisSintactico.py',74),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','analisisSintactico.py',77),
]
